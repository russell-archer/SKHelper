@Tutorial(time: 5) {
    @XcodeRequirement(title: "Xcode 16", destination: "https://developer.apple.com/download/applications/") 
    
    @Intro(title: "Display all products") {
        Add code to display all products and support user purchases.       
    }
    
    @Section(title: "Display all products") {
        @ContentAndMedia {
            In this section we'll add the code required to display all products and support user purchases.
            
            We also see how to customize the display of product information.
            
            @Image(source: "quickstart14.png", alt: "Display products.")
        }
        
        @Steps {
            @Step {
                Open your project's **SKHelperDemoApp.swift** file and replace the contents with the code as shown.
                
                @Code(name: "SKHelperDemoApp.swift", file: "quickstart-app1.swift", reset: true) {}
                
                Notice how we create an instance of the **SKHelper** object and add it to the view environment.
            }
                
            @Step {
                Now open your project's **ContentView.swift** file and replace the contents with the code shown.
                
                @Code(name: "ContentView.swift", file: "quickstart-contentview1.swift", reset: true) {}
                
                Here we'll created a simple list of products using `SKHelperStoreView()`.
            }
                
            `SKHelperStoreView()` uses a StoreKit `StoreView` to create a list of all our avaliable products.
            When `SKHelper` is instantiated it reads the **Products.plist** file we created previously and asks the
            App Store for a collection of localized product information. This product information is stored in `SKHelper.products`.
                
            @Step {
                The final thing we need to do before running the demo app is to setup Xcode StoreKit testing.
                
                Select **Product > Scheme > Edit Scheme**. Select **Run** in the left pane and navigate to the **Options** tab. 
                Now select **Products.storekit** in the **StoreKit Configuration** field and then close the window.
                
                @Image(source: "quickstart12.png", alt: "Select your StoreKit configuration file in the scheme's run options.")                
            } 
            
            @Step {  
                If you now build and run the app you should see a list of all the products we configured earlier.
                
                @Image(source: "quickstart14.png", alt: "A list of all available products.")
                
                Notice how all types of products (non-consumables and subscriptions) are displayed
            }     
            
            @Step {  
                Tapping on any product image displays additional information about that product. The content for the sheet that
                displays product information is provided by the trailing closure passed to `SKHelperStoreView()`.
                
                In a production app you would need to use the `productId` parameter passed to the closure to provide different
                details for each product. For example, you might create a string catalog which provides product details text.
                The key for each string in the catalog would be the `ProductId` of the specific product.
                
                @Image(source: "quickstart16.png", alt: "Show product details.")
            }   
            
            Note that you can also purchase any product (for test purposes only, you won't be charged) by tapping the price button.
        }
    }
}
